import logging
import asyncio
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loader import bot
from keyboards.inline.buttons import admin_buttons, channel_control
from states.test import AdminState
from filters.admin import IsBotAdminFilter
from utils.db.alchemy import (
    user_count,
    get_all_user,
    get_channel,
    put_channel,
    get_channel_with_id,
    delete_channel,
    get_admins,
    change_info,
    manage_admin,
)
from data.config import ADMIN

router = Router()


@router.message(Command("admin"), IsBotAdminFilter())
async def admin_panel(msg: types.Message):
    await bot.send_message(
        chat_id=msg.chat.id,
        text="–°–∞–ª–æ–º, –ê–¥–º–∏–Ω! –•—É—à –∫–µ–ª–∏–±—Å–∏–∑.",
        reply_markup=admin_buttons,
    )


@router.message(Command("list_admins"), IsBotAdminFilter())
async def get_admins_list(msg: types.Message):
    if int(msg.chat.id) == ADMIN:
        l_o_a = get_admins()
        print(l_o_a)
        await bot.send_message(
            chat_id=msg.chat.id, text=f"–ê–¥–º–∏–Ω–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n\n{l_o_a}"
        )


@router.message(Command("add_admin"), IsBotAdminFilter())
async def add_admin(msg: types.Message):
    if int(msg.chat.id) == ADMIN:
        try:
            target_cid = msg.text.split()[1]
            print(target_cid)
            manage_admin(cid=int(target_cid), action="add")
            await bot.send_message(chat_id=msg.chat.id, text=f"‚úÖ –ë–∞–∂–∞—Ä–∏–ª–¥–∏.")
        except Exception as e:
            await bot.send_message(chat_id=ADMIN, text=f"‚ùå –•–∞—Ç–æ–ª–∏–∫: {e}")
    else:
        await bot.send_message(chat_id=msg.chat.id, text="‚õî –°–∏–∑–¥–∞ –±—É–Ω–¥–∞–π –∏–º–∫–æ–Ω–∏—è—Ç –π—û“õ!")


@router.message(Command("del_admin"), IsBotAdminFilter())
async def del_admin(msg: types.Message):
    if int(msg.chat.id) == ADMIN:
        try:
            target_cid = msg.text.split()[1]
            manage_admin(cid=int(target_cid), action="rm")
            await bot.send_message(chat_id=msg.chat.id, text=f"‚úÖ –ê–¥–º–∏–Ω —û—á–∏—Ä–∏–ª–¥–∏.")
        except Exception as e:
            await bot.send_message(chat_id=ADMIN, text=f"‚ùå –•–∞—Ç–æ–ª–∏–∫: {e}")
    else:
        await bot.send_message(chat_id=msg.chat.id, text="‚õî –°–∏–∑–¥–∞ –±—É–Ω–¥–∞–π –∏–º–∫–æ–Ω–∏—è—Ç –π—û“õ!")


@router.callback_query(F.data == "stat")
async def show_stat(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.message.chat.id, text=f"üë• –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä —Å–æ–Ω–∏: {user_count()}"
    )


@router.callback_query(F.data == "send")
async def ask_ad_content(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        chat_id=call.message.chat.id,
        text="üì¢ –Æ–±–æ—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω —Ö–∞–±–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥. –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω /admin!",
    )
    await state.set_state(AdminState.ask_ad_content)


@router.callback_query(F.data == "channels")
async def show_channels(call: types.CallbackQuery):
    r = get_channel_with_id()
    await bot.send_message(
        chat_id=call.message.chat.id,
        text=f"üì° –ö–∞–Ω–∞–ª–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n{r}",
        reply_markup=channel_control,
    )


@router.callback_query(F.data == "channel_add")
async def ask_channel_add(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        chat_id=call.message.chat.id,
        text="üîó @ –±–µ–ª–≥–∏—Å–∏–∑ –∫–∞–Ω–∞–ª –º–∞–Ω–∑–∏–ª–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥. –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω /admin!",
    )
    await state.set_state(AdminState.Add_Channel)


@router.callback_query(F.data == "channel_del")
async def ask_channel_del(call: types.CallbackQuery, state: FSMContext):
    res_text = f"{get_channel_with_id()}\n\n‚ùå –é—á–∏—Ä–º–æ“õ—á–∏ –±—û–ª–≥–∞–Ω –∫–∞–Ω–∞–ª–∏ ID —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥. –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω /admin!"
    await bot.send_message(chat_id=call.message.chat.id, text=res_text)
    await state.set_state(AdminState.Delete_Channel)


@router.callback_query(F.data == "sitting_admins", IsBotAdminFilter())
async def admin_settings(call: types.CallbackQuery):
    await bot.send_message(
        chat_id=call.message.chat.id,
        text=f"‚öôÔ∏è –ë—É —Ñ—É–Ω–∫—Ü–∏—è–¥–∞–Ω —Ñ–∞“õ–∞—Ç {ADMIN} —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–∏ –º—É–º–∫–∏–Ω!\n\n"
             "/list_admins - –ê–¥–º–∏–Ω–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –∫—û—Ä–∏—à\n"
             "/add_admin [CID] - –ê–¥–º–∏–Ω “õ—û—à–∏—à\n"
             "/del_admin [CID] - –ê–¥–º–∏–Ω–Ω–∏ —û—á–∏—Ä–∏—à",
    )


@router.message(AdminState.ask_ad_content, IsBotAdminFilter())
async def send_ad_to_users(message: types.Message, state: FSMContext):
    if message.text not in ["/admin", "/start"]:
        users = get_all_user()
        count = 0
        for user in users:
            try:
                await message.send_copy(chat_id=user)
                count += 1
                await asyncio.sleep(0.033)
            except Exception as error:
                logging.info(f"–•–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–º–∞–¥–∏: {user}. –•–∞—Ç–æ–ª–∏–∫: {error}")
        await message.answer(
            text=f"üì¢ –†–µ–∫–ª–∞–º–∞ {count} —Ç–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏."
        )
    await state.clear()


@router.message(AdminState.Add_Channel, IsBotAdminFilter())
async def add_channel_process(message: types.Message, state: FSMContext):
    if message.text not in ["/admin", "/start"]:
        try:
            put_channel(channel=message.text)
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"üì° @{message.text} –º–∞–∂–±—É—Ä–∏–π –∫–∞–Ω–∞–ª–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–≥–∞ “õ—û—à–∏–ª–¥–∏ ‚úÖ",
            )
        except Exception as error:
            logging.info(f"–ö–∞–Ω–∞–ª–Ω–∏ “õ—û—à–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {error}")
    await state.clear()


@router.message(AdminState.Delete_Channel, IsBotAdminFilter())
async def delete_channel_process(message: types.Message, state: FSMContext):
    if message.text not in ["/admin", "/start"]:
        try:
            x = int(message.text)
            if delete_channel(ch_id=x):
                await bot.send_message(
                    chat_id=message.chat.id, text="‚ùå –ö–∞–Ω–∞–ª —û—á–∏—Ä–∏–ª–¥–∏."
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫! ID'–Ω–∏ —Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–¥–∏–Ω–≥–∏–∑–º–∏?",
                )
        except Exception as error:
            logging.info(f"–ö–∞–Ω–∞–ª–Ω–∏ —û—á–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {error}")

    await state.clear()
